name: Flutter CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Setup iOS certificates
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          # Check if secrets are available and not empty
          if [ -z "$APPLE_CERTIFICATE_P12" ] || [ "$APPLE_CERTIFICATE_P12" = "null" ]; then
            echo "‚ùå APPLE_CERTIFICATE_P12 secret is not set or empty"
            echo "To enable iOS deployment, add the following secrets to your repository:"
            echo "- APPLE_DISTRIBUTION_CERTIFICATE_P12"
            echo "- APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD"
            echo "- APPLE_PROVISIONING_PROFILE"
            exit 0
          fi
          
          if [ -z "$APPLE_CERTIFICATE_PASSWORD" ] || [ "$APPLE_CERTIFICATE_PASSWORD" = "null" ]; then
            echo "‚ùå APPLE_CERTIFICATE_PASSWORD secret is not set or empty"
            exit 0
          fi
          
          if [ -z "$APPLE_PROVISIONING_PROFILE" ] || [ "$APPLE_PROVISIONING_PROFILE" = "null" ]; then
            echo "‚ùå APPLE_PROVISIONING_PROFILE secret is not set or empty"
            exit 0
          fi
          
          echo "‚úÖ All required iOS secrets are present"
          
          # Debug secret lengths (without exposing actual values)
          echo "Secret status:"
          echo "- APPLE_CERTIFICATE_P12 length: ${#APPLE_CERTIFICATE_P12}"
          echo "- APPLE_CERTIFICATE_PASSWORD length: ${#APPLE_CERTIFICATE_PASSWORD}"
          echo "- APPLE_PROVISIONING_PROFILE length: ${#APPLE_PROVISIONING_PROFILE}"
          
          # Create certificates directory
          mkdir -p ~/certificates
          
          # Decode and save distribution certificate (handle potential line breaks and whitespace)
          echo "$APPLE_CERTIFICATE_P12" | tr -d '\n\r\t ' | base64 -d > ~/certificates/distribution_certificate.p12
          
          # Verify certificate decoding was successful
          if [ ! -s ~/certificates/distribution_certificate.p12 ]; then
            echo "Certificate decoding failed. Trying alternative method..."
            # Try alternative decoding method
            printf '%s' "$APPLE_CERTIFICATE_P12" | base64 -d > ~/certificates/distribution_certificate.p12
          fi
          
          # Decode and save provisioning profile (handle potential line breaks and whitespace)
          echo "$APPLE_PROVISIONING_PROFILE" | tr -d '\n\r\t ' | base64 -d > ~/certificates/SeChat_App_Store.mobileprovision
          
          # Verify certificate file
          echo "Verifying certificate file..."
          ls -la ~/certificates/distribution_certificate.p12
          file ~/certificates/distribution_certificate.p12
          
          # Test certificate format and password
          echo "Testing certificate format..."
          if openssl pkcs12 -info -in ~/certificates/distribution_certificate.p12 -noout -passin pass:"$APPLE_CERTIFICATE_PASSWORD"; then
            echo "‚úÖ Certificate format is valid"
          else
            echo "‚ùå Certificate validation failed - checking if file is valid P12"
            openssl pkcs12 -info -in ~/certificates/distribution_certificate.p12 -noout -passin pass: || echo "Certificate file appears to be corrupted"
          fi
          
          # Create and configure keychain
          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          
          # Import certificate to keychain with detailed error handling
          echo "Importing certificate to keychain..."
          if ! security import ~/certificates/distribution_certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert; then
            echo "Certificate import failed. Trying alternative method..."
            # Try importing without specifying type
            security import ~/certificates/distribution_certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -A
          fi
          
          # Verify import was successful
          echo "Verifying certificate import..."
          security find-identity -v -p codesigning build.keychain
          
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain
          
          # Install provisioning profile with correct UUID
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certificates/SeChat_App_Store.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Also copy with specific UUID (extract UUID from profile)
          UUID=$(security cms -D -i ~/certificates/SeChat_App_Store.mobileprovision 2>/dev/null | grep -A 1 "<key>UUID</key>" | grep "<string>" | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          cp ~/certificates/SeChat_App_Store.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # List available certificates and profiles
          echo "Available certificates in build keychain:"
          security find-identity -v -p codesigning build.keychain
          echo ""
          echo "Available certificates in default keychain:"
          security find-identity -v -p codesigning
          echo ""
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo ""
          echo "Checking provisioning profile content:"
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "Profile: $(basename "$profile")"
            security cms -D -i "$profile" 2>/dev/null | grep -A 1 "<key>Name</key>" | grep "<string>" || echo "Could not read profile"
          done

      - name: Build Android AAB
        run: flutter build appbundle --release

      - name: Build iOS IPA
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_P12 }}
        run: |
          if [ -z "$APPLE_CERTIFICATE_P12" ]; then
            echo "‚ö†Ô∏è  iOS certificates not configured. Skipping iOS build."
            echo "Creating empty iOS artifact to prevent deployment job failure."
            mkdir -p build/ios/ipa
            echo "iOS build skipped - no certificates" > build/ios/ipa/skip_marker.txt
            exit 0
          fi
          
          echo "üîê Building iOS IPA with certificates..."
          if flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name=1.0.1 \
            --build-number=2 \
            --verbose; then
            echo "‚úÖ iOS build completed successfully"
          else
            echo "‚ùå iOS build failed"
            echo "Creating placeholder for deployment job..."
            mkdir -p build/ios/ipa
            echo "iOS build failed" > build/ios/ipa/build_failed.txt
          fi
          
          # Check if IPA was created
          echo "Checking for created IPA files..."
          ls -la build/ios/ipa/ || echo "No IPA directory found"
          find build/ios -name "*.ipa" || echo "No IPA files found"

      - name: Upload Android AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab
        
      - name: Upload iOS IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: build/ios/ipa/
          if-no-files-found: warn

  deploy-android:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: app-release.aab
          path: ./
      
      - name: Verify AAB file
        run: |
          echo "Contents of current directory:"
          ls -la ./
          echo "Looking for AAB file:"
          find . -name "*.aab" -type f || echo "No AAB files found"
      
      - name: Upload to Google Play Internal Testing
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
          packageName: com.strapblaque.sechat
          releaseFiles: app-release.aab
          track: internal
          status: draft
          inAppUpdatePriority: 2

  deploy-ios:
    needs: build
    runs-on: macos-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-release
          path: ./ios-artifacts/
      
      - name: Check if iOS build is available
        run: |
          echo "Contents of iOS artifacts:"
          ls -la ./ios-artifacts/ || echo "No iOS artifacts found"
          
          # Check for skip markers
          if [ -f "./ios-artifacts/skip_marker.txt" ]; then
            echo "‚ö†Ô∏è  iOS build was skipped due to missing certificates."
            echo "To enable iOS deployment, add the required secrets to your repository."
            exit 0
          fi
          
          if [ -f "./ios-artifacts/build_failed.txt" ]; then
            echo "‚ö†Ô∏è  iOS build failed during compilation."
            echo "Check the build logs for details."
            exit 0
          fi
          
          # Find the IPA file
          IPA_FILE=$(find ./ios-artifacts -name "*.ipa" -type f | head -n 1)
          
          if [ -z "$IPA_FILE" ]; then
            echo "‚ö†Ô∏è  No IPA file found in artifacts. iOS build may have failed."
            echo "Available files:"
            find ./ios-artifacts -type f || echo "No files found"
            exit 0
          fi
          
          echo "‚úÖ iOS build found: $IPA_FILE"
          echo "Moving IPA to expected location..."
          cp "$IPA_FILE" ./SeChat.ipa
      
      - name: Upload to TestFlight
        env:
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          # Skip if iOS build was skipped or secrets are missing
          if [ ! -f "./SeChat.ipa" ] || [ "$(cat ./SeChat.ipa 2>/dev/null || echo '')" = "iOS build skipped - no certificates" ]; then
            echo "‚ö†Ô∏è  Skipping TestFlight upload - iOS build not available"
            exit 0
          fi
          
          if [ -z "$APPSTORE_ISSUER_ID" ] || [ -z "$APPSTORE_API_KEY_ID" ] || [ -z "$APPSTORE_API_PRIVATE_KEY" ]; then
            echo "‚ö†Ô∏è  App Store Connect API credentials not configured. Skipping TestFlight upload."
            echo "To enable TestFlight deployment, add the following secrets:"
            echo "- APPSTORE_ISSUER_ID"
            echo "- APPSTORE_API_KEY_ID"
            echo "- APPSTORE_API_PRIVATE_KEY"
            exit 0
          fi
          
          # Use xcrun altool for TestFlight upload
          echo "üöÄ Uploading to TestFlight..."
          xcrun altool --upload-app --type ios --file "./SeChat.ipa" \
            --apiKey "$APPSTORE_API_KEY_ID" \
            --apiIssuer "$APPSTORE_ISSUER_ID" \
            --verbose