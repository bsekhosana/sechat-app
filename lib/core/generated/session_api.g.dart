// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class SessionIdentity {
  SessionIdentity({
    this.publicKey,
    this.privateKey,
    this.sessionId,
    this.createdAt,
  });

  String? publicKey;

  String? privateKey;

  String? sessionId;

  String? createdAt;

  Object encode() {
    return <Object?>[
      publicKey,
      privateKey,
      sessionId,
      createdAt,
    ];
  }

  static SessionIdentity decode(Object result) {
    result as List<Object?>;
    return SessionIdentity(
      publicKey: result[0] as String?,
      privateKey: result[1] as String?,
      sessionId: result[2] as String?,
      createdAt: result[3] as String?,
    );
  }
}

class SessionMessage {
  SessionMessage({
    this.id,
    this.senderId,
    this.receiverId,
    this.content,
    this.messageType,
    this.timestamp,
    this.status,
    this.isOutgoing,
  });

  String? id;

  String? senderId;

  String? receiverId;

  String? content;

  String? messageType;

  String? timestamp;

  String? status;

  bool? isOutgoing;

  Object encode() {
    return <Object?>[
      id,
      senderId,
      receiverId,
      content,
      messageType,
      timestamp,
      status,
      isOutgoing,
    ];
  }

  static SessionMessage decode(Object result) {
    result as List<Object?>;
    return SessionMessage(
      id: result[0] as String?,
      senderId: result[1] as String?,
      receiverId: result[2] as String?,
      content: result[3] as String?,
      messageType: result[4] as String?,
      timestamp: result[5] as String?,
      status: result[6] as String?,
      isOutgoing: result[7] as bool?,
    );
  }
}

class SessionContact {
  SessionContact({
    this.sessionId,
    this.name,
    this.profilePicture,
    this.lastSeen,
    this.isOnline,
    this.isBlocked,
  });

  String? sessionId;

  String? name;

  String? profilePicture;

  String? lastSeen;

  bool? isOnline;

  bool? isBlocked;

  Object encode() {
    return <Object?>[
      sessionId,
      name,
      profilePicture,
      lastSeen,
      isOnline,
      isBlocked,
    ];
  }

  static SessionContact decode(Object result) {
    result as List<Object?>;
    return SessionContact(
      sessionId: result[0] as String?,
      name: result[1] as String?,
      profilePicture: result[2] as String?,
      lastSeen: result[3] as String?,
      isOnline: result[4] as bool?,
      isBlocked: result[5] as bool?,
    );
  }
}

class SessionGroup {
  SessionGroup({
    this.groupId,
    this.name,
    this.description,
    this.avatar,
    this.members,
    this.adminId,
    this.createdAt,
  });

  String? groupId;

  String? name;

  String? description;

  String? avatar;

  List<String?>? members;

  String? adminId;

  String? createdAt;

  Object encode() {
    return <Object?>[
      groupId,
      name,
      description,
      avatar,
      members,
      adminId,
      createdAt,
    ];
  }

  static SessionGroup decode(Object result) {
    result as List<Object?>;
    return SessionGroup(
      groupId: result[0] as String?,
      name: result[1] as String?,
      description: result[2] as String?,
      avatar: result[3] as String?,
      members: (result[4] as List<Object?>?)?.cast<String?>(),
      adminId: result[5] as String?,
      createdAt: result[6] as String?,
    );
  }
}

class SessionAttachment {
  SessionAttachment({
    this.id,
    this.fileName,
    this.filePath,
    this.fileSize,
    this.mimeType,
    this.url,
  });

  String? id;

  String? fileName;

  String? filePath;

  int? fileSize;

  String? mimeType;

  String? url;

  Object encode() {
    return <Object?>[
      id,
      fileName,
      filePath,
      fileSize,
      mimeType,
      url,
    ];
  }

  static SessionAttachment decode(Object result) {
    result as List<Object?>;
    return SessionAttachment(
      id: result[0] as String?,
      fileName: result[1] as String?,
      filePath: result[2] as String?,
      fileSize: result[3] as int?,
      mimeType: result[4] as String?,
      url: result[5] as String?,
    );
  }
}

class _SessionApiHandlerCodec extends StandardMessageCodec {
  const _SessionApiHandlerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SessionAttachment) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SessionContact) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SessionGroup) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is SessionIdentity) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is SessionMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return SessionAttachment.decode(readValue(buffer)!);
      case 129: 
        return SessionContact.decode(readValue(buffer)!);
      case 130: 
        return SessionGroup.decode(readValue(buffer)!);
      case 131: 
        return SessionIdentity.decode(readValue(buffer)!);
      case 132: 
        return SessionMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SessionApiHandler {
  /// Constructor for [SessionApiHandler].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SessionApiHandler({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _SessionApiHandlerCodec();

  Future<Map<String?, String?>> generateEd25519KeyPair() async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.generateEd25519KeyPair';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Map<Object?, Object?>?)!.cast<String?, String?>();
    }
  }

  Future<void> initializeSession(SessionIdentity arg_identity) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.initializeSession';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_identity]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect() async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.connect';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect() async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.disconnect';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendMessage(SessionMessage arg_message) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.sendMessage';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendTypingIndicator(String arg_sessionId, bool arg_isTyping) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.sendTypingIndicator';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_sessionId, arg_isTyping]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addContact(SessionContact arg_contact) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.addContact';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_contact]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeContact(String arg_sessionId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.removeContact';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_sessionId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateContact(SessionContact arg_contact) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.updateContact';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_contact]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> createGroup(SessionGroup arg_group) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.createGroup';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_group]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> addMemberToGroup(String arg_groupId, String arg_memberId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.addMemberToGroup';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_groupId, arg_memberId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeMemberFromGroup(String arg_groupId, String arg_memberId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.removeMemberFromGroup';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_groupId, arg_memberId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> leaveGroup(String arg_groupId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.leaveGroup';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_groupId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> uploadAttachment(SessionAttachment arg_attachment) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.uploadAttachment';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_attachment]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<SessionAttachment> downloadAttachment(String arg_attachmentId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.downloadAttachment';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_attachmentId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as SessionAttachment?)!;
    }
  }

  Future<String> encryptMessage(String arg_message, String arg_recipientId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.encryptMessage';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_message, arg_recipientId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> decryptMessage(String arg_encryptedMessage, String arg_senderId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.decryptMessage';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_encryptedMessage, arg_senderId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> configureOnionRouting(bool arg_enabled, String? arg_proxyUrl) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.configureOnionRouting';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled, arg_proxyUrl]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> saveToStorage(String arg_key, String arg_value) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.saveToStorage';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_key, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> loadFromStorage(String arg_key) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.loadFromStorage';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_key]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> generateSessionId(String arg_publicKey) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.generateSessionId';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_publicKey]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<bool> validateSessionId(String arg_sessionId) async {
    const String channelName = 'dev.flutter.pigeon.sechat_app.SessionApiHandler.validateSessionId';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_sessionId]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _SessionCallbackApiCodec extends StandardMessageCodec {
  const _SessionCallbackApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SessionAttachment) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SessionContact) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SessionGroup) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is SessionMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return SessionAttachment.decode(readValue(buffer)!);
      case 129: 
        return SessionContact.decode(readValue(buffer)!);
      case 130: 
        return SessionGroup.decode(readValue(buffer)!);
      case 131: 
        return SessionMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class SessionCallbackApi {
  static const MessageCodec<Object?> codec = _SessionCallbackApiCodec();

  void onMessageReceived(SessionMessage message);

  void onContactAdded(SessionContact contact);

  void onContactUpdated(SessionContact contact);

  void onContactRemoved(String sessionId);

  void onTypingReceived(String sessionId);

  void onTypingStopped(String sessionId);

  void onMessageStatusUpdated(String messageId);

  void onConnected();

  void onDisconnected();

  void onError(String error);

  void onGroupCreated(String groupId);

  void onGroupUpdated(SessionGroup group);

  void onGroupDeleted(String groupId);

  void onMemberAdded(String groupId, String memberId);

  void onMemberRemoved(String groupId, String memberId);

  void onAttachmentUploaded(SessionAttachment attachment);

  void onAttachmentDownloaded(SessionAttachment attachment);

  static void setup(SessionCallbackApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageReceived', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionMessage? arg_message = (args[0] as SessionMessage?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageReceived was null, expected non-null SessionMessage.');
          try {
            api.onMessageReceived(arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionContact? arg_contact = (args[0] as SessionContact?);
          assert(arg_contact != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactAdded was null, expected non-null SessionContact.');
          try {
            api.onContactAdded(arg_contact!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionContact? arg_contact = (args[0] as SessionContact?);
          assert(arg_contact != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactUpdated was null, expected non-null SessionContact.');
          try {
            api.onContactUpdated(arg_contact!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactRemoved', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactRemoved was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_sessionId = (args[0] as String?);
          assert(arg_sessionId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactRemoved was null, expected non-null String.');
          try {
            api.onContactRemoved(arg_sessionId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingReceived', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_sessionId = (args[0] as String?);
          assert(arg_sessionId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingReceived was null, expected non-null String.');
          try {
            api.onTypingReceived(arg_sessionId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingStopped', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingStopped was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_sessionId = (args[0] as String?);
          assert(arg_sessionId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingStopped was null, expected non-null String.');
          try {
            api.onTypingStopped(arg_sessionId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageStatusUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageStatusUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_messageId = (args[0] as String?);
          assert(arg_messageId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageStatusUpdated was null, expected non-null String.');
          try {
            api.onMessageStatusUpdated(arg_messageId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onConnected', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          try {
            api.onConnected();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onDisconnected', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          try {
            api.onDisconnected();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onError was null, expected non-null String.');
          try {
            api.onError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupCreated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupCreated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_groupId = (args[0] as String?);
          assert(arg_groupId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupCreated was null, expected non-null String.');
          try {
            api.onGroupCreated(arg_groupId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionGroup? arg_group = (args[0] as SessionGroup?);
          assert(arg_group != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupUpdated was null, expected non-null SessionGroup.');
          try {
            api.onGroupUpdated(arg_group!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupDeleted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupDeleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_groupId = (args[0] as String?);
          assert(arg_groupId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupDeleted was null, expected non-null String.');
          try {
            api.onGroupDeleted(arg_groupId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_groupId = (args[0] as String?);
          assert(arg_groupId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberAdded was null, expected non-null String.');
          final String? arg_memberId = (args[1] as String?);
          assert(arg_memberId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberAdded was null, expected non-null String.');
          try {
            api.onMemberAdded(arg_groupId!, arg_memberId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberRemoved', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberRemoved was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_groupId = (args[0] as String?);
          assert(arg_groupId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberRemoved was null, expected non-null String.');
          final String? arg_memberId = (args[1] as String?);
          assert(arg_memberId != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberRemoved was null, expected non-null String.');
          try {
            api.onMemberRemoved(arg_groupId!, arg_memberId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentUploaded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentUploaded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionAttachment? arg_attachment = (args[0] as SessionAttachment?);
          assert(arg_attachment != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentUploaded was null, expected non-null SessionAttachment.');
          try {
            api.onAttachmentUploaded(arg_attachment!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentDownloaded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentDownloaded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SessionAttachment? arg_attachment = (args[0] as SessionAttachment?);
          assert(arg_attachment != null,
              'Argument for dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentDownloaded was null, expected non-null SessionAttachment.');
          try {
            api.onAttachmentDownloaded(arg_attachment!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
