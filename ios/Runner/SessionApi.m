// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "SessionApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface SessionIdentity ()
+ (SessionIdentity *)fromList:(NSArray *)list;
+ (nullable SessionIdentity *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SessionMessage ()
+ (SessionMessage *)fromList:(NSArray *)list;
+ (nullable SessionMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SessionContact ()
+ (SessionContact *)fromList:(NSArray *)list;
+ (nullable SessionContact *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SessionGroup ()
+ (SessionGroup *)fromList:(NSArray *)list;
+ (nullable SessionGroup *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SessionAttachment ()
+ (SessionAttachment *)fromList:(NSArray *)list;
+ (nullable SessionAttachment *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation SessionIdentity
+ (instancetype)makeWithPublicKey:(nullable NSString *)publicKey
    privateKey:(nullable NSString *)privateKey
    sessionId:(nullable NSString *)sessionId
    createdAt:(nullable NSString *)createdAt {
  SessionIdentity* pigeonResult = [[SessionIdentity alloc] init];
  pigeonResult.publicKey = publicKey;
  pigeonResult.privateKey = privateKey;
  pigeonResult.sessionId = sessionId;
  pigeonResult.createdAt = createdAt;
  return pigeonResult;
}
+ (SessionIdentity *)fromList:(NSArray *)list {
  SessionIdentity *pigeonResult = [[SessionIdentity alloc] init];
  pigeonResult.publicKey = GetNullableObjectAtIndex(list, 0);
  pigeonResult.privateKey = GetNullableObjectAtIndex(list, 1);
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.createdAt = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable SessionIdentity *)nullableFromList:(NSArray *)list {
  return (list) ? [SessionIdentity fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.publicKey ?: [NSNull null],
    self.privateKey ?: [NSNull null],
    self.sessionId ?: [NSNull null],
    self.createdAt ?: [NSNull null],
  ];
}
@end

@implementation SessionMessage
+ (instancetype)makeWithId:(nullable NSString *)id
    senderId:(nullable NSString *)senderId
    receiverId:(nullable NSString *)receiverId
    content:(nullable NSString *)content
    messageType:(nullable NSString *)messageType
    timestamp:(nullable NSString *)timestamp
    status:(nullable NSString *)status
    isOutgoing:(nullable NSNumber *)isOutgoing {
  SessionMessage* pigeonResult = [[SessionMessage alloc] init];
  pigeonResult.id = id;
  pigeonResult.senderId = senderId;
  pigeonResult.receiverId = receiverId;
  pigeonResult.content = content;
  pigeonResult.messageType = messageType;
  pigeonResult.timestamp = timestamp;
  pigeonResult.status = status;
  pigeonResult.isOutgoing = isOutgoing;
  return pigeonResult;
}
+ (SessionMessage *)fromList:(NSArray *)list {
  SessionMessage *pigeonResult = [[SessionMessage alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.senderId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.receiverId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.content = GetNullableObjectAtIndex(list, 3);
  pigeonResult.messageType = GetNullableObjectAtIndex(list, 4);
  pigeonResult.timestamp = GetNullableObjectAtIndex(list, 5);
  pigeonResult.status = GetNullableObjectAtIndex(list, 6);
  pigeonResult.isOutgoing = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable SessionMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SessionMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.id ?: [NSNull null],
    self.senderId ?: [NSNull null],
    self.receiverId ?: [NSNull null],
    self.content ?: [NSNull null],
    self.messageType ?: [NSNull null],
    self.timestamp ?: [NSNull null],
    self.status ?: [NSNull null],
    self.isOutgoing ?: [NSNull null],
  ];
}
@end

@implementation SessionContact
+ (instancetype)makeWithSessionId:(nullable NSString *)sessionId
    name:(nullable NSString *)name
    profilePicture:(nullable NSString *)profilePicture
    lastSeen:(nullable NSString *)lastSeen
    isOnline:(nullable NSNumber *)isOnline
    isBlocked:(nullable NSNumber *)isBlocked {
  SessionContact* pigeonResult = [[SessionContact alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.name = name;
  pigeonResult.profilePicture = profilePicture;
  pigeonResult.lastSeen = lastSeen;
  pigeonResult.isOnline = isOnline;
  pigeonResult.isBlocked = isBlocked;
  return pigeonResult;
}
+ (SessionContact *)fromList:(NSArray *)list {
  SessionContact *pigeonResult = [[SessionContact alloc] init];
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.profilePicture = GetNullableObjectAtIndex(list, 2);
  pigeonResult.lastSeen = GetNullableObjectAtIndex(list, 3);
  pigeonResult.isOnline = GetNullableObjectAtIndex(list, 4);
  pigeonResult.isBlocked = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable SessionContact *)nullableFromList:(NSArray *)list {
  return (list) ? [SessionContact fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.sessionId ?: [NSNull null],
    self.name ?: [NSNull null],
    self.profilePicture ?: [NSNull null],
    self.lastSeen ?: [NSNull null],
    self.isOnline ?: [NSNull null],
    self.isBlocked ?: [NSNull null],
  ];
}
@end

@implementation SessionGroup
+ (instancetype)makeWithGroupId:(nullable NSString *)groupId
    name:(nullable NSString *)name
    description:(nullable NSString *)description
    avatar:(nullable NSString *)avatar
    members:(nullable NSArray<NSString *> *)members
    adminId:(nullable NSString *)adminId
    createdAt:(nullable NSString *)createdAt {
  SessionGroup* pigeonResult = [[SessionGroup alloc] init];
  pigeonResult.groupId = groupId;
  pigeonResult.name = name;
  pigeonResult.description = description;
  pigeonResult.avatar = avatar;
  pigeonResult.members = members;
  pigeonResult.adminId = adminId;
  pigeonResult.createdAt = createdAt;
  return pigeonResult;
}
+ (SessionGroup *)fromList:(NSArray *)list {
  SessionGroup *pigeonResult = [[SessionGroup alloc] init];
  pigeonResult.groupId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.description = GetNullableObjectAtIndex(list, 2);
  pigeonResult.avatar = GetNullableObjectAtIndex(list, 3);
  pigeonResult.members = GetNullableObjectAtIndex(list, 4);
  pigeonResult.adminId = GetNullableObjectAtIndex(list, 5);
  pigeonResult.createdAt = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable SessionGroup *)nullableFromList:(NSArray *)list {
  return (list) ? [SessionGroup fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.groupId ?: [NSNull null],
    self.name ?: [NSNull null],
    self.description ?: [NSNull null],
    self.avatar ?: [NSNull null],
    self.members ?: [NSNull null],
    self.adminId ?: [NSNull null],
    self.createdAt ?: [NSNull null],
  ];
}
@end

@implementation SessionAttachment
+ (instancetype)makeWithId:(nullable NSString *)id
    fileName:(nullable NSString *)fileName
    filePath:(nullable NSString *)filePath
    fileSize:(nullable NSNumber *)fileSize
    mimeType:(nullable NSString *)mimeType
    url:(nullable NSString *)url {
  SessionAttachment* pigeonResult = [[SessionAttachment alloc] init];
  pigeonResult.id = id;
  pigeonResult.fileName = fileName;
  pigeonResult.filePath = filePath;
  pigeonResult.fileSize = fileSize;
  pigeonResult.mimeType = mimeType;
  pigeonResult.url = url;
  return pigeonResult;
}
+ (SessionAttachment *)fromList:(NSArray *)list {
  SessionAttachment *pigeonResult = [[SessionAttachment alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.fileName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.filePath = GetNullableObjectAtIndex(list, 2);
  pigeonResult.fileSize = GetNullableObjectAtIndex(list, 3);
  pigeonResult.mimeType = GetNullableObjectAtIndex(list, 4);
  pigeonResult.url = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable SessionAttachment *)nullableFromList:(NSArray *)list {
  return (list) ? [SessionAttachment fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.id ?: [NSNull null],
    self.fileName ?: [NSNull null],
    self.filePath ?: [NSNull null],
    self.fileSize ?: [NSNull null],
    self.mimeType ?: [NSNull null],
    self.url ?: [NSNull null],
  ];
}
@end

@interface SessionApiHandlerCodecReader : FlutterStandardReader
@end
@implementation SessionApiHandlerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [SessionAttachment fromList:[self readValue]];
    case 129: 
      return [SessionContact fromList:[self readValue]];
    case 130: 
      return [SessionGroup fromList:[self readValue]];
    case 131: 
      return [SessionIdentity fromList:[self readValue]];
    case 132: 
      return [SessionMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface SessionApiHandlerCodecWriter : FlutterStandardWriter
@end
@implementation SessionApiHandlerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SessionAttachment class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionContact class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionGroup class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionIdentity class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface SessionApiHandlerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation SessionApiHandlerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[SessionApiHandlerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[SessionApiHandlerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *SessionApiHandlerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    SessionApiHandlerCodecReaderWriter *readerWriter = [[SessionApiHandlerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpSessionApiHandler(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SessionApiHandler> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.generateEd25519KeyPair"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(generateEd25519KeyPairWithCompletion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(generateEd25519KeyPairWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api generateEd25519KeyPairWithCompletion:^(NSDictionary<NSString *, NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.initializeSession"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeSessionIdentity:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(initializeSessionIdentity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionIdentity *arg_identity = GetNullableObjectAtIndex(args, 0);
        [api initializeSessionIdentity:arg_identity completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.connect"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectWithCompletion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(connectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api connectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.disconnect"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectWithCompletion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(disconnectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.sendMessage"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageMessage:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(sendMessageMessage:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionMessage *arg_message = GetNullableObjectAtIndex(args, 0);
        [api sendMessageMessage:arg_message completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.sendTypingIndicator"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendTypingIndicatorSessionId:isTyping:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(sendTypingIndicatorSessionId:isTyping:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 0);
        BOOL arg_isTyping = [GetNullableObjectAtIndex(args, 1) boolValue];
        [api sendTypingIndicatorSessionId:arg_sessionId isTyping:arg_isTyping completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.addContact"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addContactContact:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(addContactContact:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionContact *arg_contact = GetNullableObjectAtIndex(args, 0);
        [api addContactContact:arg_contact completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.removeContact"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeContactSessionId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(removeContactSessionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 0);
        [api removeContactSessionId:arg_sessionId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.updateContact"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateContactContact:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(updateContactContact:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionContact *arg_contact = GetNullableObjectAtIndex(args, 0);
        [api updateContactContact:arg_contact completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.createGroup"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createGroupGroup:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(createGroupGroup:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionGroup *arg_group = GetNullableObjectAtIndex(args, 0);
        [api createGroupGroup:arg_group completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.addMemberToGroup"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addMemberToGroupGroupId:memberId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(addMemberToGroupGroupId:memberId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_memberId = GetNullableObjectAtIndex(args, 1);
        [api addMemberToGroupGroupId:arg_groupId memberId:arg_memberId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.removeMemberFromGroup"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeMemberFromGroupGroupId:memberId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(removeMemberFromGroupGroupId:memberId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_memberId = GetNullableObjectAtIndex(args, 1);
        [api removeMemberFromGroupGroupId:arg_groupId memberId:arg_memberId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.leaveGroup"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(leaveGroupGroupId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(leaveGroupGroupId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 0);
        [api leaveGroupGroupId:arg_groupId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.uploadAttachment"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(uploadAttachmentAttachment:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(uploadAttachmentAttachment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SessionAttachment *arg_attachment = GetNullableObjectAtIndex(args, 0);
        [api uploadAttachmentAttachment:arg_attachment completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.downloadAttachment"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(downloadAttachmentAttachmentId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(downloadAttachmentAttachmentId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_attachmentId = GetNullableObjectAtIndex(args, 0);
        [api downloadAttachmentAttachmentId:arg_attachmentId completion:^(SessionAttachment *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.encryptMessage"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(encryptMessageMessage:recipientId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(encryptMessageMessage:recipientId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_message = GetNullableObjectAtIndex(args, 0);
        NSString *arg_recipientId = GetNullableObjectAtIndex(args, 1);
        [api encryptMessageMessage:arg_message recipientId:arg_recipientId completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.decryptMessage"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(decryptMessageEncryptedMessage:senderId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(decryptMessageEncryptedMessage:senderId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_encryptedMessage = GetNullableObjectAtIndex(args, 0);
        NSString *arg_senderId = GetNullableObjectAtIndex(args, 1);
        [api decryptMessageEncryptedMessage:arg_encryptedMessage senderId:arg_senderId completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.configureOnionRouting"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(configureOnionRoutingEnabled:proxyUrl:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(configureOnionRoutingEnabled:proxyUrl:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        BOOL arg_enabled = [GetNullableObjectAtIndex(args, 0) boolValue];
        NSString *arg_proxyUrl = GetNullableObjectAtIndex(args, 1);
        [api configureOnionRoutingEnabled:arg_enabled proxyUrl:arg_proxyUrl completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.saveToStorage"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveToStorageKey:value:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(saveToStorageKey:value:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        NSString *arg_value = GetNullableObjectAtIndex(args, 1);
        [api saveToStorageKey:arg_key value:arg_value completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.loadFromStorage"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadFromStorageKey:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(loadFromStorageKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        [api loadFromStorageKey:arg_key completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.generateSessionId"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(generateSessionIdPublicKey:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(generateSessionIdPublicKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_publicKey = GetNullableObjectAtIndex(args, 0);
        [api generateSessionIdPublicKey:arg_publicKey completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.sechat_app.SessionApiHandler.validateSessionId"
        binaryMessenger:binaryMessenger
        codec:SessionApiHandlerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(validateSessionIdSessionId:completion:)], @"SessionApiHandler api (%@) doesn't respond to @selector(validateSessionIdSessionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 0);
        [api validateSessionIdSessionId:arg_sessionId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface SessionCallbackApiCodecReader : FlutterStandardReader
@end
@implementation SessionCallbackApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [SessionAttachment fromList:[self readValue]];
    case 129: 
      return [SessionContact fromList:[self readValue]];
    case 130: 
      return [SessionGroup fromList:[self readValue]];
    case 131: 
      return [SessionMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface SessionCallbackApiCodecWriter : FlutterStandardWriter
@end
@implementation SessionCallbackApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SessionAttachment class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionContact class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionGroup class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface SessionCallbackApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation SessionCallbackApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[SessionCallbackApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[SessionCallbackApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *SessionCallbackApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    SessionCallbackApiCodecReaderWriter *readerWriter = [[SessionCallbackApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface SessionCallbackApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation SessionCallbackApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onMessageReceivedMessage:(SessionMessage *)arg_message completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageReceived";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_message ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onContactAddedContact:(SessionContact *)arg_contact completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactAdded";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_contact ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onContactUpdatedContact:(SessionContact *)arg_contact completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactUpdated";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_contact ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onContactRemovedSessionId:(NSString *)arg_sessionId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onContactRemoved";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_sessionId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onTypingReceivedSessionId:(NSString *)arg_sessionId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingReceived";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_sessionId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onTypingStoppedSessionId:(NSString *)arg_sessionId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onTypingStopped";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_sessionId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onMessageStatusUpdatedMessageId:(NSString *)arg_messageId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMessageStatusUpdated";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_messageId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onConnectedWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onConnected";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onDisconnectedWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onDisconnected";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onErrorError:(NSString *)arg_error completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onError";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_error ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onGroupCreatedGroupId:(NSString *)arg_groupId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupCreated";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_groupId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onGroupUpdatedGroup:(SessionGroup *)arg_group completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupUpdated";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_group ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onGroupDeletedGroupId:(NSString *)arg_groupId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onGroupDeleted";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_groupId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onMemberAddedGroupId:(NSString *)arg_groupId memberId:(NSString *)arg_memberId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberAdded";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_groupId ?: [NSNull null], arg_memberId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onMemberRemovedGroupId:(NSString *)arg_groupId memberId:(NSString *)arg_memberId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onMemberRemoved";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_groupId ?: [NSNull null], arg_memberId ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onAttachmentUploadedAttachment:(SessionAttachment *)arg_attachment completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentUploaded";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_attachment ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onAttachmentDownloadedAttachment:(SessionAttachment *)arg_attachment completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.sechat_app.SessionCallbackApi.onAttachmentDownloaded";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:SessionCallbackApiGetCodec()];
  [channel sendMessage:@[arg_attachment ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

