workflows:
  # Optimized combined workflow for both platforms
  sechat-workflow:
    name: SeChat Build & Deploy
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      android_signing:
        - keystore_reference
      groups:
        - google_play
        - app_store_credentials
        - codemagic_ssh
      vars:
        XCODE_PROJECT: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        BUNDLE_ID: "com.strapblaque.sechat"
        TEAM_ID: "8A6FXCA4R9"
        PACKAGE_NAME: "com.strapblaque.sechat"
        DEBUG_BUILD: false # Set to true for debug builds, false for release
        BUILD_CACHE_ENABLED: true
        FLUTTER_BUILD_NUMBER: $CM_BUILD_NUMBER
        # Build optimization flags
        FLUTTER_BUILD_ARGS: "--release --dart-define=FLUTTER_WEB_USE_SKIA=true"
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC"
        JAVA_OPTS: "-Xmx4096m -XX:MaxPermSize=1024m"
    scripts:
      - name: Set up code signing settings on macOS
        script: |
          # Set up code signing settings on macOS
          keychain_name="codemagic.keychain"
          app_cert_path="$CM_BUILD_DIR/app_certificate.p12"
          app_profile_path="$CM_BUILD_DIR/app_profile.mobileprovision"
          
          # Create keychain
          security create-keychain -p "" $keychain_name
          security list-keychains -s $keychain_name
          security default-keychain -s $keychain_name
          security unlock-keychain -p "" $keychain_name
          security set-keychain-settings -lut 21600 $keychain_name
          
          # Import certificate
          echo "$distribution_certificate" | base64 -d > $app_cert_path
          security import $app_cert_path -k $keychain_name -P "$certificate_password" -A -t cert
          security set-key-partition-list -S apple-tool:,apple:,codesigning: -s -k "" $keychain_name
          
          # Install provisioning profile
          echo "$distribution_profile" | base64 -d > $app_profile_path
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $app_profile_path ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Get UUID from provisioning profile
          UUID=$(grep -a -A 0 "<?xml" $app_profile_path | sed -n 's/.*<key>UUID<\/key>.*<string>\([^<]*\)<\/string>.*/\1/p')
          cp $app_profile_path ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # Verify setup
          security find-identity -v -p codesigning $keychain_name
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
      - name: Set up Android keystore
        script: |
          echo "🔧 Setting up Android keystore..."
          echo "Current directory: $(pwd)"
          echo "CM_BUILD_DIR: $CM_BUILD_DIR"
          
          # Debug environment variables
          echo "Available environment variables:"
          env | grep -i android || echo "No android variables found"
          env | grep -i signing || echo "No signing variables found"
          
          # Check if base64 variable is set
          if [ -z "$ANDROID_SIGNING_KEY_BASE64" ]; then
            echo "❌ ERROR: ANDROID_SIGNING_KEY_BASE64 is not set!"
            echo "Please check your Codemagic environment variables."
            exit 1
          fi
          
          # Create the keystore file
          KEYSTORE_PATH="$CM_BUILD_DIR/android/app/app-release-key.jks"
          echo "Creating keystore at: $KEYSTORE_PATH"
          
          # Ensure directory exists
          mkdir -p "$(dirname "$KEYSTORE_PATH")"
          
          # Create the keystore file with error handling
          if ! echo "$ANDROID_SIGNING_KEY_BASE64" | base64 -d > "$KEYSTORE_PATH"; then
            echo "❌ ERROR: Failed to decode base64 keystore!"
            exit 1
          fi
          
          # Verify file was created
          echo "Verifying keystore file..."
          ls -la "$KEYSTORE_PATH"
          
          if [ ! -f "$KEYSTORE_PATH" ]; then
            echo "❌ ERROR: Keystore file was not created!"
            exit 1
          fi
          
          # Test the keystore
          if ! keytool -list -v -keystore "$KEYSTORE_PATH" -alias "$ANDROID_SIGNING_KEY_ALIAS" -storepass "$ANDROID_SIGNING_STORE_PASSWORD"; then
            echo "❌ ERROR: Failed to verify keystore!"
            exit 1
          fi
          
          echo "✅ Android keystore set up successfully"
      - name: Configure Gradle memory settings
        script: |
          # Create gradle.properties with optimized memory settings
          cat > android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC
          org.gradle.daemon=false
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableR8.fullMode=true
          EOF
          
          echo "✅ Gradle memory settings configured"
          cat android/gradle.properties
      - name: Get Flutter packages
        script: |
          flutter pub get
          # Cache dependencies for faster builds
          flutter pub deps
      - name: Update build number
        script: |
          # Update build number to prevent conflicts
          echo "Current build number: $FLUTTER_BUILD_NUMBER"
          echo "DEBUG_BUILD setting: $DEBUG_BUILD"
          flutter build-name 1.0.1
          flutter build-number $FLUTTER_BUILD_NUMBER
      - name: Build iOS IPA
        script: |
          if [ "$DEBUG_BUILD" = "true" ]; then
            echo "Building debug IPA for testing..."
            flutter build ipa --debug --export-options-plist=ios/ExportOptions.plist
          else
            echo "Building release IPA for App Store..."
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
          fi
      - name: Build Android APK/AAB
        script: |
          echo "🔍 DEBUG_BUILD environment variable: '$DEBUG_BUILD'"
          echo "🔍 Building for Google Play Store (release mode)"
          
          # Force release build for Google Play
          flutter build appbundle --release --dart-define=FLUTTER_WEB_USE_SKIA=true
          
          # Verify build artifacts
          echo "=== Build Artifacts ==="
          find build/ -name "*.aab" -o -name "*.apk" | head -10
          echo "=== End Build Artifacts ==="
          
          # Verify it's a release build
          echo "=== Checking AAB file ==="
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "✅ Release AAB found: app-release.aab"
          elif [ -f "build/app/outputs/bundle/debug/app-debug.aab" ]; then
            echo "❌ Debug AAB found instead of release AAB"
            exit 1
          else
            echo "❌ No AAB file found"
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - build/app/outputs/bundle/release/*.aab
      - build/app/outputs/bundle/debug/*.aab
    publishing:
      app_store_connect:
        api_key: $app_store_connect_api_key
        key_id: $app_store_connect_api_key_id
        issuer_id: $app_store_connect_issuer_id
        submit_to_testflight: true
        submit_to_app_store: false
      google_play:
        track: internal
        submit_as_draft: true
        credentials: google_play_service_account
      email:
        recipients:
          - $CM_EMAIL
        notify:
          success: true
          failure: true

# Trigger configuration
triggering:
  events:
    - push
    - pull_request
  branch_patterns:
    - pattern: master
      include: true
      source: true
    - pattern: main
      include: true
      source: true
  tag_patterns:
    - pattern: 'v*'
      include: true
      source: true 