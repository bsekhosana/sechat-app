# GitLab CI/CD for SeChat Flutter App
# Alternative to GitHub Actions

stages:
  - build
  - deploy

variables:
  FLUTTER_VERSION: "3.29.2"

# Build stage
build:
  stage: build
  image: ghcr.io/cirruslabs/flutter:3.29.2
  before_script:
    - flutter doctor -v
    - flutter pub get
  script:
    # Setup Android signing
    - |
      if [ -n "$ANDROID_SIGNING_KEY_BASE64" ]; then
        echo "‚úÖ Setting up Android release signing for CI/CD..."
        echo "$ANDROID_SIGNING_KEY_BASE64" | base64 -d > android/app/app-release-key.jks
        echo "‚úÖ Android keystore file created"
      else
        echo "‚ö†Ô∏è  Android signing secrets not configured. Creating dummy keystore for CI/CD."
        keytool -genkey -v -keystore android/app/app-release-key.jks -keyalg RSA -keysize 2048 -validity 1 -alias dummy -dname "CN=CI, OU=CI, O=CI, L=CI, ST=CI, C=US" -storepass dummy123 -keypass dummy123
        echo "‚úÖ Created dummy keystore (debug equivalent)"
      fi

    # Build Android AAB
    - |
      if [ -z "$ANDROID_SIGNING_KEY_ALIAS" ]; then
        echo "üîß Using dummy credentials for CI build"
        export ANDROID_SIGNING_KEY_ALIAS="dummy"
        export ANDROID_SIGNING_KEY_PASSWORD="dummy123" 
        export ANDROID_SIGNING_STORE_PASSWORD="dummy123"
      else
        echo "üîê Using production credentials for release build"
      fi
      
      flutter build appbundle --release

    # Build iOS IPA (if on macOS - GitLab shared runners don't support this)
    - echo "‚ö†Ô∏è  iOS build skipped (GitLab shared runners don't support macOS)"
    - mkdir -p build/ios/ipa
    - echo "iOS build skipped - no macOS runner" > build/ios/ipa/skip_marker.txt

  artifacts:
    paths:
      - build/app/outputs/bundle/release/app-release.aab
      - build/ios/ipa/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Deploy to Google Play (only on master)
deploy-android:
  stage: deploy
  image: openjdk:11-jdk
  dependencies:
    - build
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -sSL https://sdk.cloud.google.com | bash
    - export PATH="$PATH:/root/google-cloud-sdk/bin"
  script:
    - echo "üöÄ Deploying to Google Play Internal Testing..."
    - |
      if [ -z "$ANDROID_SERVICE_ACCOUNT_JSON" ]; then
        echo "‚ö†Ô∏è  ANDROID_SERVICE_ACCOUNT_JSON not configured. Skipping deployment."
        echo "To enable deployment, add this variable in GitLab CI/CD settings."
        exit 0
      fi
      
      # This would need a Google Play deployment tool
      echo "‚úÖ Android AAB ready for manual upload to Google Play Console"
      echo "üìç File: build/app/outputs/bundle/release/app-release.aab"
  only:
    - master

# Deploy to TestFlight (manual process)
deploy-ios:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build
  script:
    - echo "‚ö†Ô∏è  iOS deployment requires macOS runner (not available on GitLab.com)"
    - echo "üìã For iOS deployment:"
    - echo "1. Download the artifacts from this job"
    - echo "2. Build locally on macOS with: flutter build ipa --release"
    - echo "3. Upload IPA to App Store Connect manually"
  only:
    - master 