// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.strapblaque.sechat;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class SessionApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SessionIdentity {
    private @Nullable String publicKey;
    private @Nullable String privateKey;
    private @Nullable String sessionId;
    private @Nullable String createdAt;

    public @Nullable String getPublicKey() { return publicKey; }
    public void setPublicKey(@Nullable String setterArg) { this.publicKey = setterArg; }

    public @Nullable String getPrivateKey() { return privateKey; }
    public void setPrivateKey(@Nullable String setterArg) { this.privateKey = setterArg; }

    public @Nullable String getSessionId() { return sessionId; }
    public void setSessionId(@Nullable String setterArg) { this.sessionId = setterArg; }

    public @Nullable String getCreatedAt() { return createdAt; }
    public void setCreatedAt(@Nullable String setterArg) { this.createdAt = setterArg; }

    public static final class Builder {
      private @Nullable String publicKey;
      private @Nullable String privateKey;
      private @Nullable String sessionId;
      private @Nullable String createdAt;

      public @NonNull Builder setPublicKey(@Nullable String setterArg) {
        this.publicKey = setterArg;
        return this;
      }

      public @NonNull Builder setPrivateKey(@Nullable String setterArg) {
        this.privateKey = setterArg;
        return this;
      }

      public @NonNull Builder setSessionId(@Nullable String setterArg) {
        this.sessionId = setterArg;
        return this;
      }

      public @NonNull Builder setCreatedAt(@Nullable String setterArg) {
        this.createdAt = setterArg;
        return this;
      }

      public @NonNull SessionIdentity build() {
        SessionIdentity pigeonReturn = new SessionIdentity();
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setPrivateKey(privateKey);
        pigeonReturn.setSessionId(sessionId);
        pigeonReturn.setCreatedAt(createdAt);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(publicKey);
      toListResult.add(privateKey);
      toListResult.add(sessionId);
      toListResult.add(createdAt);
      return toListResult;
    }

    static @NonNull SessionIdentity fromList(@NonNull ArrayList<Object> list) {
      SessionIdentity pigeonResult = new SessionIdentity();
      Object publicKey = list.get(0);
      pigeonResult.setPublicKey((String) publicKey);
      Object privateKey = list.get(1);
      pigeonResult.setPrivateKey((String) privateKey);
      Object sessionId = list.get(2);
      pigeonResult.setSessionId((String) sessionId);
      Object createdAt = list.get(3);
      pigeonResult.setCreatedAt((String) createdAt);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class SessionApiCodec extends StandardMessageCodec {
    public static final SessionApiCodec INSTANCE = new SessionApiCodec();

    private SessionApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return SessionIdentity.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof SessionIdentity) {
        stream.write(128);
        writeValue(stream, ((SessionIdentity) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface SessionApiHandler {

    void generateEd25519KeyPair(@NonNull Result<Map<String, String>> result);

    void initializeSession(@NonNull SessionIdentity identity, @NonNull Result<Void> result);

    void connect(@NonNull Result<Void> result);

    void disconnect(@NonNull Result<Void> result);

    void saveToStorage(@NonNull String key, @NonNull String value, @NonNull Result<Void> result);

    void loadFromStorage(@NonNull String key, @NonNull Result<String> result);

    void generateSessionId(@NonNull String publicKey, @NonNull Result<String> result);

    void validateSessionId(@NonNull String sessionId, @NonNull Result<Boolean> result);

    /** The codec used by SessionApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return SessionApiCodec.INSTANCE;
    }

    /**Sets up an instance of `SessionApiHandler` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable SessionApiHandler api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.generateEd25519KeyPair", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                api.generateEd25519KeyPair(
                    new Result<Map<String, String>>() {
                      public void success(Map<String, String> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.initializeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SessionIdentity identityArg = (SessionIdentity) args.get(0);
                api.initializeSession(identityArg,
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.connect", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                api.connect(
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                api.disconnect(
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.saveToStorage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String keyArg = (String) args.get(0);
                String valueArg = (String) args.get(1);
                api.saveToStorage(keyArg, valueArg,
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.loadFromStorage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String keyArg = (String) args.get(0);
                api.loadFromStorage(keyArg,
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.generateSessionId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String publicKeyArg = (String) args.get(0);
                api.generateSessionId(publicKeyArg,
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sechat_app.SessionApi.validateSessionId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String sessionIdArg = (String) args.get(0);
                api.validateSessionId(sessionIdArg,
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    });
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
